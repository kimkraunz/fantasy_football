keep <- c("Name",  "Team", "Position", "Salary")
salaries <- salaries[, keep]
# convert team and positions to factors
salaries$Team <- as.factor(salaries$Team)
salaries$Position <- as.factor(salaries$Position)
levels_salaries_Team <- levels(salaries$Team)
# Check that factors for team are the same in projections and salaries DFs
intersect(levels_salaries_Team, levels_fs_team)
projections_fs <- merge(projections_fs, salaries, by= c("Name", "Team"))
#Load libraries
library("stringr")
library("ggplot2")
library("plyr")
#Functions
source(paste(getwd(),"/fantasy_football/FantasyFootballAnalyticsR/R Scripts/Functions/Functions.R", sep=""))
source(paste(getwd(),"/fantasy_football/FantasyFootballAnalyticsR/R Scripts/Functions/League Settings.R", sep=""))
#Suffix
suffix <- "fs"
#Download fantasy football projections from FantasySharks.com
#Download offense(minus kicker)
projections_fs_of <- read.csv("http://www.fantasysharks.com/apps/bert/forecasts/projections.php?csv=1&Sort=&Segment=532&Position=97&scoring=17&League=-1&uid=4&uid2=&printable=", stringsAsFactors = FALSE)
#Download kicker
projections_fs_k <- read.csv("http://www.fantasysharks.com/apps/bert/forecasts/projections.php?csv=1&Sort=&Segment=532&Position=7&scoring=17&League=-1&uid=4&uid2=&printable=", stringsAsFactors = FALSE)
#Download defense
projections_fs_def <- read.csv("http://www.fantasysharks.com/apps/bert/forecasts/projections.php?csv=1&Sort=&Segment=532&Position=6&scoring=17&League=-1&uid=4&uid2=&printable=", stringsAsFactors = FALSE)
#Read salaries
setwd("/Users/kimkraunz/Documents/fantasy_football")
salaries <- read.csv("FanDuel-NFL-2015-09-14-12958-players-list.csv", stringsAsFactors = FALSE)
# Keep Player, Team, Position, Pts
keep <- c("Player", "Team", "Position", "Pts")
projections_fs_of <- projections_fs_of[, keep]
projections_fs_k <- projections_fs_k[, keep]
projections_fs_def <- projections_fs_def[, keep]
projections_fs <- rbind(projections_fs_k, projections_fs_of, projections_fs_def)
# change SFO to SF in Team
if(length(projections_fs[projections_fs$Team == "SFO", "Team"]) > 0){projections_fs[projections_fs$Team == "SFO", "Team"] <- "SF"}
# Convert Team and Position to factors
projections_fs$Position <- as.factor(projections_fs$Position)
projections_fs$Team <- as.factor(projections_fs$Team)
levels_fs_team <- levels(projections_fs$Team)
# Clean up names in projection df
projections_fs$first_name <- lapply(strsplit(as.character(projections_fs$Player), ","), "[", 2)
trim.leading <- function (x)  sub("^\\s+", "", x)
projections_fs$first_name <- trim.leading(projections_fs$first_name)
projections_fs$last_name <- lapply(strsplit(as.character(projections_fs$Player), ","), "[", 1)
# Capitalize names
projections_fs$first_name <- toupper(projections_fs$first_name)
projections_fs$last_name <- toupper(projections_fs$last_name)
# merge names back together
projections_fs$Name <- paste(projections_fs$last_name, projections_fs$first_name, sep = "")
keep <- c("Name", "Team", "Position", "Pts")
projections_fs <- projections_fs[, keep]
# clean up salaries name
salaries$First.Name <- toupper(salaries$First.Name)
salaries$Last.Name <- toupper(salaries$Last.Name)
salaries$Name <- paste(salaries$Last.Name, salaries$First.Name, sep = "")
keep <- c("Name",  "Team", "Position", "Salary")
salaries <- salaries[, keep]
# convert team and positions to factors
salaries$Team <- as.factor(salaries$Team)
salaries$Position <- as.factor(salaries$Position)
levels_salaries_Team <- levels(salaries$Team)
# Check that factors for team are the same in projections and salaries DFs
intersect(levels_salaries_Team, levels_fs_team)
projections <- merge(projections_fs, salaries, by= c("Name", "Team"))
setdiff(projections$Name, salaries$Name)
Name_proj <- as.factor(projections$Name)
Name_salaries <- as.factor(salaries$Name)
levels_proj <- levels(Name_proj)
levels_sal <- levels(Name_salaries)
setdiff(levels_proj, levels_sal)
setdiff(levels_sal, levels_proj)
setdiff(salaries$Name, projections$Name)
View(salaries)
View(projections_fs)
View(projections)
install.package("caret")
library(caret)
install.packages("lpSolve")
library(lpSolve)
library(caret)
install.package("caret")
install.packages("caret")
library(caret)
#install.packages("XML")
library(XML)
#install.package("caret")
library(caret)
#install.packages("lpSolve")
library(lpSolve)
###################################
## Take data from premier league website##
###################################
# URL of interest:
mps <- "http://fantasy.premierleague.com/player-list/"
# parse the document for R representation:
mps.doc <- htmlParse(mps)
# get all the tables in mps.doc as data frames
mps.tabs <- readHTMLTable(mps.doc)
summary(mps.tabs)
mps.tabs[[2]]
##################
####Manipulation##
##################
##Manipulate into table
mps.GK<-rbind(mps.tabs[[1]],mps.tabs[[2]])
mps.GK$Position<-as.factor("GK")
mps.DF<-rbind(mps.tabs[[3]],mps.tabs[[4]])
mps.DF$Position<-as.factor("DF")
mps.MD<-rbind(mps.tabs[[5]],mps.tabs[[6]])
mps.MD$Position<-as.factor("MD")
mps.FD<-rbind(mps.tabs[[7]],mps.tabs[[8]])
mps.FD$Position<-as.factor("FD")
##Bind for full data
footy.data<-rbind(mps.GK,mps.DF,mps.MD,mps.FD)
##Change storage of each variable
footy.data$Cost<-as.numeric(as.character(substring(footy.data$Cost,2)))
footy.data$Points<-as.numeric(as.character(footy.data$Points))
footy.data$Player<-as.character(footy.data$Player)
str(footy.data)
#ok
dim(footy.data)
summary(footy.data)
summary(projections)
keep <- c("Name", "Team", "Pts", "Salary", "Position.x")
projections <- projections[, keep]
colnames(c("Player", "Team", "Points", "Cost", "Position"))
colnames(projections) <- c("Player", "Team", "Points", "Cost", "Position")
summary(projections)
help(lp)
Opt.squad<-function(dat,cost,n.d=1,n.k=1,n.qb=1,n.rb=2, n.wr=3, n.te=1) {
#dat<-footy.data
#cost<-100
#n.gk=2
#n.df=5
#n.md=5
#n.fd=3
##Attach play
#attach(dat)
#length(Cost)
##Create dummy variables
fact.only<-dat[, which(sapply(dat, class)=="factor")]
non.fact<-dat[, which(sapply(dat, class)!="factor")]
dat.dummy<-model.matrix(~ Position + Team, data=fact.only,
contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F),
Team=contrasts(fact.only$Team, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
}
Opt.squad(projections, 60000)
View(projections)
proj <- as.matrix(projections)
Opt.squad(proj, 60000)
summary(footy.data)
projections$Points <- as.numeric(projections$Points)
projections$Cost <- as.numeric(projections$Cost)
summary(projections)
Opt.squad<-function(dat,cost,n.d=1,n.k=1,n.qb=1,n.rb=2, n.wr=3, n.te=1) {
#dat<-footy.data
#cost<-100
#n.gk=2
#n.df=5
#n.md=5
#n.fd=3
##Attach play
#attach(dat)
#length(Cost)
##Create dummy variables
fact.only<-dat[, which(sapply(dat, class)=="factor")]
non.fact<-dat[, which(sapply(dat, class)!="factor")]
dat.dummy<-model.matrix(~ Position + Team, data=fact.only,
contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F),
Team=contrasts(fact.only$Team, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
}
Opt.squad(projections, 60000)
proj <- as.matrix(projections)
Opt.squad(proj, 60000)
fact.only<-projections[, which(sapply(projections, class)=="factor")]
non.fact<-projections[, which(sapply(projections, class)!="factor")]
dat.dummy<-model.matrix(~ Position + Team, data=fact.only, contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F), Team=contrasts(fact.only$Team, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
n.choose <- 9
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],play)
f.con<-t(f.con)
help(cbind)
n.choose <- 9
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
num_play  <- rep(1,nn)
#n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
n.choose <- 9
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
f.rhs <- c(60000,1,1,1,2,3,1,choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
str(f.obj)
str(f.con)
f.rhs <- c(60000,1,1,1,2,3,1,9)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
f.rhs <- c(100000,1,1,1,2,3,1,9)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
View(proj)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
as.numeric(projections$Position == "K"), # num K
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
}
output
out1
View(f.con)
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
dat2<-dat.dummy[,-1]
dat2
dat.dummy
dat.dummy<-model.matrix(~ Position, data=fact.only, contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F)))
dat.dummy
dat2<-dat.dummy[,-1]
dat2
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
dat
f.obj <- dat$Points
nn<-length(f.obj)
num_play  <- rep(1,nn)
#n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
n.choose <- 9
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
#f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,n.choose)
f.rhs <- c(100000,1,1,1,2,3,1,9)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,1:3]
final.pick
}
final.pick<-dat[pick1a,]
final.pick
Opt.squad<-function(dat,cost,n.d=1,n.k=1,n.qb=1,n.rb=2, n.wr=3, n.te=1) {
##Create dummy variables
fact.only<-projections[, which(sapply(projections, class)=="factor")]
non.fact<-projections[, which(sapply(projections, class)!="factor")]
dat.dummy<-model.matrix(~ Position, data=fact.only, contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
num_play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.wr,n.te,n.choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,]
final.pick
}
}
Opt.squad(proj, 60000)
Opt.squad<-function(dat,cost,n.d=1,n.k=1,n.qb=1,n.rb=2, n.wr=3, n.te=1) {
##Create dummy variables
fact.only<-projections[, which(sapply(projections, class)=="factor")]
non.fact<-projections[, which(sapply(projections, class)!="factor")]
dat.dummy<-model.matrix(~ Position, data=fact.only, contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
num_play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.te,n.wr,n.choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a,]
final.pick
}
}
Opt.squad(proj, 60000)
total1
sol1
Opt.squad<-function(dat,cost,n.d=1,n.k=1,n.qb=1,n.rb=2, n.wr=3, n.te=1) {
##Create dummy variables
fact.only<-projections[, which(sapply(projections, class)=="factor")]
non.fact<-projections[, which(sapply(projections, class)!="factor")]
dat.dummy<-model.matrix(~ Position, data=fact.only, contrasts.arg=list(Position=contrasts(fact.only$Position, contrasts=F)))
dat2<-dat.dummy[,-1]
colnames(dat2)<-gsub("[^#A-Za-z0-9_]","",colnames(dat2))
dat<-cbind(non.fact,dat2)
##Pick optimum team
f.obj <- dat$Points
nn<-length(f.obj)
num_play  <- rep(1,nn)
n.choose<-n.d+n.k+n.qb+n.rb+n.wr+n.te
f.con <- cbind(Cost=dat$Cost,dat[,colnames(dat) %in% colnames(dat2)],num_play)
f.con<-t(f.con)
f.dir <- c("<=","=","=","=","=","=", "=", "=")
f.rhs <- c(cost,n.d,n.k,n.qb,n.rb,n.te,n.wr,n.choose)
out1  <- lp("max", f.obj, f.con, f.dir, f.rhs,all.bin=TRUE)
if (out1$status == 2) {
print ("There was no optimal solution. Try a different approach or increase/decrease your total cost")
} else {
sol1  <- out1$solution
total1 <- out1$objval
###Take numbers and take out
pick1a <- rep(0,15)
k     <- 0
f.obj2<-f.obj
for (j in 1:nn) {
if (sol1[j]==1) {
k        <- k+1
pick1a[k] <- j
}
}
final.pick<-dat[pick1a, 1:3]
final.pick
}
}
Opt.squad(proj, 60000)
